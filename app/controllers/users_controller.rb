class UsersController < ApplicationController
  # run logged_in_user before running actions index, edit, update, or destroy
  before_action :logged_in_user, only: [:index, :edit, :update, :destroy, :following, :followers] 
  before_action :correct_user, only: [:edit, :update]	# before running method edit OR update, run
							# correct_user
  before_action :admin_user, only: [:destroy]		# only admins may run action destroy

  def index
    @users = User.paginate(page: params[:page])		# paginate method grabs 30 objects at a time by
							# default. each page corresponds with 30 objects.
							# here params[:page] is generated by will_paginate
  end

  def show
    @user = User.find(params[:id])	# pass the id parameter to find()
    @microposts = @user.microposts.paginate(page: params[:page])	# paginate user microposts
  end

  def new
    @user = User.new
  end

  def create
    @user = User.new(user_params) 
    if @user.save
      @user.send_activation_email						# send activation email
      flash[:info] = "Please check your email to activate your account."	# set flash
      redirect_to root_url							# direct to home page
    else
      render 'new'					# on fail render 'new' page
    end
  end

  # Grab user data to pass along to the Edit page
  def edit
    @user = User.find(params[:id])	# Get id of user
  end

  # Existing user updates own data
  def update
    @user = User.find(params[:id])		# Get id of user
    if @user.update_attributes(user_params)	# try to update user params to db 
      flash[:success] = "Profile updated"	# set flash on success
      redirect_to @user				# redirect to profile page
    else
      render 'edit'				# on fail render 'edit' page
    end
  end

  # Delete a user
  def destroy
    User.find(params[:id]).destroy	# find and delete user
    flash[:success] = "User deleted"	# set flash
    redirect_to users_url
  end

  def following
    @title = "Following"					# set a title
    @user  = User.find(params[:id])				# get user id
    @users = @user.following.paginate(page: params[:page])	# paginated users
    render 'show_follow'					# show follow page
  end

  def followers
    @title = "Followers"					# set a title
    @user  = User.find(params[:id])				# get user id
    @users = @user.followers.paginate(page: params[:page])	# paginated users
    render 'show_follow'					# show follow page
  end

  private

    # STRONG PARAMETERS
    # user_params requires attribute user, and within it permits attri
    # butes name, email, password, password_confirmation
    def user_params
      params.require(:user).permit(:name, :email, :password,
                                   :password_confirmation)
    end

    ##
    ## Before Filters 

    # Confirms the correct user.
    def correct_user
      @user = User.find(params[:id])				# grab current user
      redirect_to(root_url) unless current_user?(@user)		# redirect to root page unless user
								# equals current_user from
								# app/helpers/session_helper.rb
    end

    # Confirms an admin user.
    def admin_user
      redirect_to(root_url) unless current_user.admin?
    end

end
